How to Use 3-say_my_name.py



This modules defines a function "say_my_name(first_name, last_name="")".


Usage

''say_my_name(...)'' prints "My name is <first_name> <last_name>".


::


    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Kayode", "Ogidan")
    My name is Kayode Ogidan


::


    >>> say_my_name("Iyanuoluwa Ogidan", "Debs II")
    My name is Iyanuoluwa Ogidan Debs II


The parameter '''last_name''' is optional. If no last name is provided,
an empty string is printed instead.


::


    >>> say_my_name("Kayode")
    My name is Kayode


Invalid Names



The parameters ''first_name'' and ''last_name'' must be strings. Otherwise,
a TypeError is raised.


::


    >>> say_my_name(7, "James")
    Traceback (most recent call last):
    TypeError: first_name must be a string


::


    >>> say_my_name("Bond", ["Cars", "Actor", "Guns"])
    Traceback (most recent call last):
    TypeError: last_name must be a string


::


    >>> say_my_name({"James": 7, "Bond": 16}, 007)
    Traceback (most recent call last):
    TypeError: first_name must be a string


::


    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string


At least one name must be provided.


::


    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
